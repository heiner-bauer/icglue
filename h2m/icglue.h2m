[description]
Tcl-Library for scripted HDL generation. It generations HDL code form a user-defined Tcl-Input script.

[enviroment]
Environment variables are additional to the options passed to \fBicglue\fR.
Options specfied take precedence over enviroment variables.

.IP ICGLUE_TEMPLATE_PATH
Sets the template directories, equivalent to the \fB--template-dir\fR option. Mutliple directories must be seperate by a colon (:).

.IP ICGLUE_TEMPLATE
Sets the default template, equivalent to the \fB--template\fR option.

.IP ICGLUE_LINE_NUMBERS
Add linenumbers to icglue logging print-out (debug)

[examples]
Creating hierarchies via the \fBM\fR command with the -tree flag:
.PP
.in +2n
The hierarchie level is specified by the indentation of non-alpha characters
.br
After this, it directly follows the modulename.
.br
Multiple instances of the same type can be create be using the <...> syntax.
.br
Attributes of the module are passed in brackets.
.br
See the \fBM\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# Generate hierarchie in unit submodule
.br
\fBM\fR -unit "component" -tree {
.br
    tb_component ............. (tb,v)
    |
    +- component_top ......... (rtl)
    |  |
    |  \\- submod_wrap ........ (rtl,unit=submod_wrap)
    |     \\- submod_top ...... (inc)
    |
    \\- component_regfile...... (rf)
.br
}

\fBM\fR -unit "submod" -tree {
    submod_top ...................................... (rtl)
    |
    +- submod ....................................... (rtl)
    \\- common_sync<submod0..4,submod_my_sync>........ (res)
.br
}

.EE
.PP
Connection modules can be done via the \fBS\fR command:
.br
See the \fBS\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# connections
.br
\fBS\fR "clk"                 tb_component  -->  component_regfile submod:core_clk_i
.br
\fBS\fR "resetn"              tb_component  -->  component_regfile submod:nrst_i
.br
\fBS\fR "rf_addr"       -w 32 tb_component  -->  component_regfile
.br
\fBS\fR "config_submod" -w 5  submod        <--  component_regfile
.br
\fBS\fR "status_submod" -w 16 submod        -->  component_regfile
.EE
.PP
Passing parameters can be done via the \fBP\fR command:
.br
See the \fBP\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# parameters
.br
\fBP\fR DATA_W = 32 component_regfile submod
.EE
.PP

Passing inline code can be done via the \fBC\fR command:
.br
See the \fBC\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# code placed in submod_wrap
.br
\fBC\fR submod_wrap {
    assign reset_sync = ~data_valid;
.br
}
.EE
.PP

Regfile code can be create via the \fBR\fR command. Inline connections are possible.
.br
See the \fBR\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
\fBR\fR component_regfile "entry_name0" {
    "name"   | "entrybits" | "type" | "reset" | "signal"          | "comment"
    -----    | ----------- | -----  | ------- | --------          | ---------
    s_cfg    | 4:0         | RW     | 5\[aq]h0    | submod:s_cfg_i    | "Configure component"
    s_status | 31:16       | R      | 16\[aq]h0   | submod:s_status_o | "Component status"
.br
}
.PP
Same without inline connection:
.PP
.in +4n
.EX
.br
\fBS\fR "entry_name0_s_cfg"    -w 5  submod:s_cfg_i     <--  component_regfile
.br
\fBS\fR "entry_name0_s_status" -w 16 submod:s_status_o  -->  component_regfile
.br
\fBR\fR component_regfile "entry_name0" {
    "name"   | "entrybits" | "type" | "reset" | "signal"             | "comment"
    -----    | ----------- | -----  | ------- | --------             | ---------
    s_cfg    | 4:0         | RW     | 5\[aq]h0    | entry_name0_s_cfg    | "Configure component"
    s_status | 31:16       | R      | 16\[aq]h0   | entry_name0_s_status | "Component status"
.br
}
.PP
The extra-column "signalbit" can be used to split wire e.g.
.PP
.in +4n
.EX
\fBS\fR "s_cfg_large" -w 40 component_regfile  -->  submod
.br
\fBR\fR component_regfile "entry_name1_low" {
    "name" | "entrybits" | "type" | "reset" | "signal"    | "signalbits" | "comment"
    -----  | ----------- | -----  | ------- | --------    | ------------ | ---------
    s_cfg  | 31:0        | RW     | 32\[aq]h0   | s_cfg_large | 31:0         | "Configure submod part 0"
.br
}
.br
\fBR\fR component_regfile "entry_name1_high" {
    "name" | "entrybits" | "type" | "reset" | "signal"    | "signalbits" | "comment"
    -----  | ----------- | -----  | ------- | --------    | ------------ | ---------
    s_cfg  | 7:0         | RW     | 8\[aq]h0    | s_cfg_large | 39:32        | "Configure submod part 1"
.br
}
.EE
.PP

[reporting bugs]
E-mail bug reports to \fBandreas.dixius@tu-dresden.de\fR, \fBfelix.neumaerker@tu-dresden.de\fR.
.br
Also, please include the output of \`icglue --version\` in the body of your report if at all possible.

[see also]
\fBig(10i)\fR - Scripting commands manpage
.PP
HTML documentation of the Tcl-library at \fB%DOCDIRTCL%/html/index.html\fR
\" vim: ft=nroff

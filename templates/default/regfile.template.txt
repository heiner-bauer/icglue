<%
    #----------------------------------------#
    #  ^..^                                  #
    # ( oo )  )~                             #
    #   ,,  ,,                               #
    #----------------------------------------#
    # register file markup language template #
    #----------------------------------------#
%><%
    set register_list [regfile_to_arraylist $obj_id]
    set header { "Register Name" "Address" "Name" "Port" "Width" "Access" "Align" "Reset" "Description" }

    set collumn_width { 0 0 0 0 0 0 0 0 0 }

    set seperator_v        "|"
    set seperator_h        "-"
    set seperator_h_head   "="
    set crossing           "+"


    foreach_array register $register_list {
        foreach_array sreg $register(regs) {

            max_set len_max_data(0)   [max_array_entry_len $register_list name       ]
            max_set len_max_data(1)   10
            max_set len_max_data(2)   [max_array_entry_len $register(regs) name      ]
            max_set len_max_data(3)   [max_array_entry_len $register(regs) signal    ]
            max_set len_max_data(4)   [max_array_entry_len $register(regs) width     ]
            max_set len_max_data(5)   [max_array_entry_len $register(regs) type      ]
            max_set len_max_data(6)   [max_array_entry_len $register(regs) entrybits ]
            max_set len_max_data(7)   [max_array_entry_len $register(regs) reset     ]
            max_set len_max_data(8)   [max_array_entry_len $register(regs) comment   ]
            max_set len_max_data(9) 0
        }
    }

    set num_collumn { 0 1 2 3 4 5 6 7 8 }
    foreach i_collumn $num_collumn {
        set tmp_string [lindex $header $i_collumn]
        set len_header [string length $tmp_string]

        if {$len_header >  $len_max_data($i_collumn)} {
            lset collumn_width $i_collumn $len_header
        } else {
            lset collumn_width $i_collumn $len_max_data($i_collumn)
        }
        set debug [lindex $collumn_width $i_collumn]
    }

    # define header text
    proc get_padding_size { width string } {
        set string_length [string length $string]
        set padding       [expr {$width - $string_length} ]

        return $padding
    }

    proc seperator_line { seperator crossing num_collumn collumn_width } {
       set line ""
       append $line $crossing

        # generate separator line
        foreach i_collumn $num_collumn {
            set width [expr { [lindex $collumn_width $i_collumn]} ]
            for { set i 0} {$i < [expr {$width + 2 }]} {incr i} {
                append $line $seperator
            }
            append $line $crossing
        }
        append $line "\n"
    }
%><%

########################################################################
%><%
    # generate header
    foreach i_collumn $num_collumn {
        set tmp_string [lindex $header $i_collumn]
        set len_header [string length $tmp_string]
        set padding [expr {[lindex $collumn_width $i_collumn] - $len_header} ]

        %><[format "%s %s%${padding}s " $seperator_v $tmp_string "" ]><%
         if {$i_collumn == 8} {
             %><%=$seperator_v%><%
         }
    }
%><%="\n"%><%
%><%
    %><%=[seperator_line $seperator_h_head $crossing $num_collumn $collumn_width]%><%
%><%
# generate register list
    foreach_array reg $register_list {

        set sreg_idx 0
        foreach_array sreg $reg(regs) {

            #start of line
            %><%=$seperator_v%> <%
            foreach i_collumn $num_collumn {

               if {$i_collumn == 0} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $reg(name)]
                   if {$sreg_idx == 0 } {
                     %><[format "%s%${padding}s %s " $reg(name) "" $seperator_v]><%
                   } else {
                       %><[format "%${width}s %s " "" $seperator_v]><%
                  }
               }
               if {$i_collumn == 1} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $reg(address)]
                   if {$sreg_idx == 0 } {
                      %><[format "0x%08x %s " $reg(address)  $seperator_v ]><%
                   } else {
                       %><[format "%${width}s %s " "" $seperator_v]><%
                  }
               }
               if {$i_collumn == 2} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(name)]
                   %><[format "%s%${padding}s %s " $sreg(name) ""  $seperator_v]><%
               }

               if {$i_collumn == 3} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(signal)]
                   %><[format "%s%${padding}s %s " $sreg(signal) "" $seperator_v]><%
               }
               if {$i_collumn == 4} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(width)]
                  %><[format "%s%${padding}s %s "  $sreg(width) "" $seperator_v]><%
               }
               if {$i_collumn == 5} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(type)]
                  %><[format "%s%${padding}s %s "  $sreg(type) "" $seperator_v]><%
               }
               if {$i_collumn == 6} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(entrybits)]
                  %><[format "%s%${padding}s %s "  $sreg(entrybits) "" $seperator_v]><%
               }
               if {$i_collumn == 7} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(reset)]
                  %><[format "%s%${padding}s %s "  $sreg(reset) "" $seperator_v]><%
               }
               if {$i_collumn == 8} {
                   set width   [lindex $collumn_width $i_collumn]
                   set padding [get_padding_size $width $sreg(comment)]
                  %><[format "%s%${padding}s %s"  $sreg(comment)  "" $seperator_v]><%
               }
        }
        %><%="\n"%><%
        incr sreg_idx
    }

    %><%=[seperator_line $seperator_h $crossing $num_collumn $collumn_width]%><%

%><%
%><%    }
%>

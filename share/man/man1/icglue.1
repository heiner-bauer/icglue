.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.
.TH ICGLUE "1" "July 2018" "ICGlue 1.0a1" "User Commands"
.SH NAME
ICGlue \- manual page for ICGlue 1.0a1
.SH SYNOPSIS
.B icglue
[\fI\,OPTION\/\fR]... \fI\,FILE\/\fR
.SH DESCRIPTION
Tcl-Library for scripted HDL generation. It generations HDL code form a user-defined Tcl-Input script.
.SH OPTIONS
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-h\fR, \fB\-\-help\fR
Show help
.TP
\fB\-f\fR, \fB\-\-file\fR=\fI\,FILE\/\fR
DEPRECATED: set input FILE to use (FILE argument is omitted)
.TP
\fB\-t\fR, \fB\-\-template\fR=\fI\,FILE\/\fR
Set FILE to use as template
.TP
\fB\-\-template\-dir\fR=\fI\,DIR\/\fR
Add DIR to template path
.TP
\fB\-l\fR, \fB\-\-logger\fR=\fI\,TAG\/\fR
Enable output log of TAG (format: LEVEL,IDENTIFIER)
.TP
\fB\-a\fR, \fB\-\-args=K\fR[=\fI\,V\/\fR]
Set K to V before running icglue construction script
.TP
\fB\-q\fR, \fB\-\-quiet\fR
Show errors only
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Be verbose
.TP
\fB\-\-\-version\fR
Show version
.TP
\fB\-d\fR, \fB\-\-debug\fR
Show debug output
.SH ENVIROMENT
Environment variables are additional to the options passed to \fBicglue\fR.
Options specfied take precedence over enviroment variables.

.IP ICGLUE_TEMPLATE_PATH
Sets the template directories, equivalent to the \fB--template-dir\fR option. Mutliple directories must be seperate by a colon (:).

.IP ICGLUE_TEMPLATE
Sets the default template, equivalent to the \fB--template\fR option.
.SH EXAMPLES
Creating hierarchies via the \fIM\fR command with the -tree flag:
.PP
.in +2n
The hierarchie level is specified by the indentation of dots (.).
.br
After this, it directly follows the modulename.
.br
Multiple instances of the same type can be create be using the <...> syntax.
.br
Attributes of the module are passed in brackets.
.br
See the \fIM\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# Generate hierarchie in unit submodule
.br
M -unit "component" -tree {
.br
    ..tb_component(tb,v)
    ...component_top(rtl)
    .....submod_wrap(rtl,unit=submod_wrap)
    ......submod_wrap(inc)
    .....component_regfile(rf)
.br
}

M -unit "submod" -tree {
    ...submod_top(rtl)
    .....submod(rtl)
    .........common_sync<submod0..4,submod_my_sync>(res)
.br
}

.EE
.PP
Connection modules can be done via the \fIS\fR command:
.br
See the \fIS\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# connections
.br
S       "clk"           tb_component --> component_regfile submod:core_clk_i
.br
S       "resetn"        tb_component --> component_regfile submod:nrst_i
.br
S -w 32 "rf_addr"       tb_top       --> component_regfile
.br
S -w 5  "config_submod" submod       <-- component_regfile
.br
S -w 16 "status_submod" submod       --> component_regfile
.EE
.PP
Passing parameters can be done via the \fIP\fR command:
.br
See the \fIP\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# parameters
.br
P DATA_W = 32 component_regfile submod
.EE
.PP

Passing inline code can be done via the \fIC\fR command:
.br
See the \fIC\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
# code placed in submod_wrap
.br
C submod_wrap {
    assign reset_sync = ~data_valid;
.br
}
.EE
.PP

Regfile code can be create via the \fIR\fR command. Inline connections are possible.
The adresse-flag (@) is optional.
.br
See the \fIR\fR command in \fBig(10i)\fR for further details.
.PP
.in +4n
.EX
R component_regfile "entry_name" @0x0008 {
    { "name"       "entrybits" "type"   "reset"  "signal"              "comment"             }
    {  s_cfg        4:0         RW        5'h0    component:config_i   "Configure component" }
    {  s_status     15:0        R        16'h0    component:status     "Component status"    }
.br
}
.br
Same without inline connection:
.br
S -w  5 "s_cfg"    component_regfile --> component
.br
S -w 16 "s_status" component         --> component_regfile
.br
R component_regfile "entry_name" @0x0008 {
    { "name"       "entrybits" "type"   "reset"  "signal"   "comment"             }
    {  s_cfg        4:0         RW        5'h0    s_cfg     "Configure component" }
    {  s_status     15:0        R        16'h0    s_status  "Component status"    }
.br
}
The extra-column "signalbit can be used to split wire e.g.
.br
S -w 40 "s_cfg_large"    component_regfile --> component
.br
R component_regfile "entry_name" @0x0008 {
    { "name"       "entrybits" "type"   "reset"  "signal" "signalbits"   "comment"                    }
    {  s_cfg        31:0         RW      31'h0    s_cfg    31:0          "Configure component part 0" }
.br
}
R component_regfile "entry_name" @0x0008 {
    { "name"       "entrybits" "type"   "reset"  "signal" "signalbits"   "comment"                     }
    {  s_cfg        7:0          RW      8'h0     s_cfg    39:32          "Configure component part 1" }
.br
}
.EE
.PP
.SH AUTHOR
Written by Andreas Dixius, Felix Neumaerker
.SH "REPORTING BUGS"
E-mail bug reports to \fBandreas.dixius@tu-dresden.de\fR, \fBfelix.neumaerker@tu-dresden.de\fR.
.br
Also, please include the output  of  ``icglue --version'' in the body of your report if at all possible.
.SH COPYRIGHT
Copyright \(co 2017 Andreas Dixius, Felix Neumaerker
.PP
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
\fBig(10i)\fR - Scripting commands manpage
.PP
HTML documentation of the Tcl-library at \fB%DOCDIRTCL%/html/index.html\fR
\" vim: ft=nroff
.PP
The full documentation for
.B ICGlue
is maintained as a Texinfo manual.  If the
.B info
and
.B ICGlue
programs are properly installed at your site, the command
.IP
.B info ICGlue
.PP
should give you access to the complete manual.

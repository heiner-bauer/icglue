#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2018  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# set package path and load ICGlue package
lappend auto_path [file normalize [file dirname [file normalize $::argv0]]/..]
package require ICGlue

proc main {} {
    # init templates
    ig::templates::add_template_dir "[file dirname [file normalize $::argv0]]/../templates"
    # TODO: template-dir environment variable?
    ig::templates::load_template "default"

    # arguments
    if {$::argc != 1} {
        ig::log -error "Expected one input file"
        exit 1
    }
    set gen_source [lindex $::argv 0]
    # TODO: advanced arg parsing: input-file, template to choose, ...?

    if {[string match "*.sng" $gen_source] || [string match "*.icsng" $gen_source]} {
        ig::sng::parse_file $gen_source
    } elseif {[string match "*.tcl" $gen_source]} {
        source $gen_source
    } else {
        ig::log -error "Unknown input file suffix for $gen_source"
        exit 1
    }

    # generate modules
    foreach i_module [ig::db::get_modules -all] {
        if {![ig::db::get_attribute -object $i_module -attribute "resource"]} {
            ig::log -info "generating module $i_module"
            ig::templates::write_object $i_module
        }
        if {![catch {ig::db::get_regfiles -all -of $i_module} regfiles]} {
            foreach i_regfile $regfiles {
                ig::log -info "generating regfiledoc $i_regfile"
                ig::templates::write_object $i_regfile
            }
        }
    }
}

main

# vim: set filetype=tcl

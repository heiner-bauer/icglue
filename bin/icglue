#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2018  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# try to set package path and load ICGlue package for typical cases
set binpath $::argv0
# in case script is a relative symlink, get to absolute path of script
catch {set binpath [file normalize [file join [file dirname $binpath] [file readlink $binpath]]]}
lappend auto_path [file normalize [file dirname [file normalize $binpath]]/..]
package require ICGlue

proc printhelp {{exitcode 0} {doexit "true"}} {
    puts "Usage: [file tail $::argv0] \[OPTION\]... FILE"
    puts ""
    puts "Options:"
    puts "Mandatory arguments to long options are mandatory for short options too."
    puts "    -h, --help               Show help"
    puts ""
    puts "    -f, --file=FILE          Set input FILE to use"
    puts "    -t, --template=TEMPLATE  Set TEMPLATE to use"
    puts "    --template-dir=DIR       Add DIR to template path"
    puts ""
    puts "    -q, --quiet              Show errors only"
    puts "    -v, --verbose            Be verbose"
    puts "    ---version               Show version"
    puts "    -d, --debug              Show debug output"

    if {$doexit} {
        exit $exitcode
    }
}

proc printversion {} {
    puts "ICGlue 1.0a1"
    puts "Copyright (C) 2017 Andreas Dixius, Felix Neumaerker"
    puts ""
    puts "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
    puts "This is free software: you are free to change and redistribute it."
    puts "There is NO WARRANTY, to the extent permitted by law."
    puts ""
    puts "Written by Andreas Dixius, Felix Neumaerker"
    exit 0
}

proc main {} {
    variable binpath

    # flags
    set help            "false"
    set help_invalid    "false"
    set c_loglevel      "W"
    set debugdebug      "false"
    set print_version   "false"

    # flags with mandatory arguments
    set c_template      "default"
    set c_template_dirs {}
    set c_file          ""

    # arguments
    set filename [ig::aux::_parse_opts {} {} [list                   \
        {  {^(-h|--help)$}         "const=true" help            {} } \
        {  {^-help(doxy)?$}        "const=true" help_invalid    {} } \
        {  {^(-q|--quiet)$}        "const=E"    c_loglevel      {} } \
        {  {^(-v|--verbose)$}      "const=I"    c_loglevel      {} } \
        {  {^(-d|--debug)$}        "const=D"    c_loglevel      {} } \
        {  {^(-dd|--debugdebug)$}  "const=true" debugdebug      {} } \
        {  {^(--version$)}         "const=true" print_version   {} } \
                                                                     \
        {  {^--template-dir(=|$)}  "list"       c_template_dirs {} } \
        {  {^(-t|--template)(=|$)} "string"     c_template      {} } \
        {  {^(-f|--file)(=|$)}     "list"       c_file          {} } \
        ] $::argv]

    if {$help} {
        printhelp 0
    }
    if {$help_invalid} {
        printhelp 1
    }
    set c_loglines "false"
    if {$debugdebug} {
        set c_loglines "true"
    }

    if {$print_version} {
        printversion
    }

    # environment
    # ... template path ($ICGLUE_TEMPLATE_PATH)
    if {[info exists ::env(ICGLUE_TEMPLATE_PATH)]} {
        foreach i_dir [split $::env(ICGLUE_TEMPLATE_PATH) ":"] {
            lappend c_template_dirs $i_dir
        }
    }
    # ... template to use ($ICGLUE_TEMPLATE)
    if {[info exists ::env(ICGLUE_TEMPLATE)]} {
        set c_template $::env(ICGLUE_TEMPLATE)
    }

    # templates provided with package
    lappend c_template_dirs [list "[file dirname [file normalize $binpath]]/../templates"]
    lappend c_template_dirs [list "[file dirname [file normalize $binpath]]/../../share/icglue/templates"]

    lappend c_file $filename
    # argument evaluation
    if {[llength $c_file] == 0} {
        ig::log -error "Not enough arguments"
        printhelp 1
    }
    if {![file isfile $c_file]} {
        ig::log -error "Cant open file \"${c_file}\" for reading"
        exit 1
    }

    if {$c_loglines} {
        ig::logger -level ${c_loglevel} -linenumber
    } else {
        ig::logger -level ${c_loglevel} -nolinenumber
    }

    foreach i_tdir $c_template_dirs {
        if {[file isdirectory $i_tdir]} {
            ig::templates::add_template_dir $i_tdir
        }
    }

    if {[catch {ig::templates::load_template $c_template}]} {
        ig::log -error "failed to load template \"${c_template}\""
        exit 1
    }

    # construct hierarchy from input file
    if {[string match "*.sng" $c_file] || [string match "*.icsng" $c_file]} {
        ig::sng::parse_file $c_file
    } elseif {[string match "*.tcl" $c_file]} {
        ig::construct::run_script $c_file
    } else {
        ig::log -error "Unknown input file suffix for \"$c_file\""
        exit 1
    }

    # generate modules with template
    foreach i_module [ig::db::get_modules -all] {
        if {![ig::db::get_attribute -object $i_module -attribute "resource"]} {
            ig::log -info "generating module $i_module"
            ig::templates::write_object_all $i_module
        }
        if {![catch {ig::db::get_regfiles -all -of $i_module} regfiles]} {
            foreach i_regfile $regfiles {
                ig::log -info "generating regfiledoc $i_regfile"
                ig::templates::write_object_all $i_regfile
            }
        }
    }
}

main

# vim: set filetype=icgluetcl syntax=tcl:

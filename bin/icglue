#!/usr/bin/env tclsh

#
#   ICGlue is a Tcl-Library for scripted HDL generation
#   Copyright (C) 2017-2018  Andreas Dixius, Felix Neum√§rker
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# set package path and load ICGlue package
lappend auto_path [file normalize [file dirname [file normalize $::argv0]]/..]
package require ICGlue

proc printhelp {{exitcode 0} {doexit "true"}} {
    puts "Usage:"
    puts "    $::argv0 \[options\] \[-f\] <file>"
    puts ""
    puts "Options:"
    puts "    -h,--help               Show help"
    puts ""
    puts "    -f,--file      FILE     Set input file to use"
    puts "    -t,--template  TEMPLATE Set template to use"
    puts "    --template-dir DIR      Add DIR to template path"
    puts ""
    puts "    -q,--quiet              Show errors only"
    puts "    -v,--verbose            Be verbose"
    puts "    -d,--debug              Show debug output"

    if {$doexit} {
        exit $exitcode
    }
}

proc main {} {
    # default config
    set c_template      "default"
    set c_loglevel      "W"
    set c_loglines      "false"
    set c_file          ""
    # templates provided with package
    set c_template_dirs [list "[file dirname [file normalize $::argv0]]/../templates"]

    # environment
    # ... template path
    if {[info exists ::env(ICGLUE_TEMPLATE_PATH)]} {
        foreach i_dir [split $::env(ICGLUE_TEMPLATE_PATH) "\n"] {
            lappend c_template_dirs $i_dir
        }
    }
    # ... template to use
    if {[info exists ::env(ICGLUE_TEMPLATE)]} {
        set c_template $::env(ICGLUE_TEMPLATE)
    }

    # arguments
    for {set i 0} {$i < $::argc} {incr i} {
        switch -- [lindex $::argv $i] {
            -h     -
            --help {
                # help
                printhelp 0
            }
            -q      -
            --quiet {
                # verbosity
                set c_loglevel E
            }
            -v        -
            --verbose {
                set c_loglevel I
            }
            -d      -
            --debug {
                if {$c_loglevel eq "D"} {
                    set c_loglines "true"
                } else {
                    set c_loglevel D
                }
            }
            -dd {
                set c_loglevel D
                set c_loglines "true"
            }
            --template-dir {
                # templates
                incr i
                lappend c_template_dirs [lindex $::argv $i]
            }
            -t         -
            --template {
                incr i
                set c_template [lindex $::argv $i]
            }
            -f     -
            --file {
                # input file
                incr i
                set c_file [lindex $::argv $i]
            }
            default {
                set c_file [lindex $::argv $i]
            }
        }
    }

    # argument evaluation
    if {$c_file eq ""} {
        ig::log -error "no valid input file specified"
        printhelp 1
    }
    if {![file isfile $c_file]} {
        ig::log -error "input file \"${c_file}\" invalid"
        exit 1
    }

    if {$c_loglines} {
        ig::logger -level ${c_loglevel} -linenumber
    } else {
        ig::logger -level ${c_loglevel} -nolinenumber
    }

    foreach i_tdir $c_template_dirs {
        if {![file isdirectory $i_tdir]} {
            ig::log -error "template include dir argument \"${i_tdir}\" is no directory"
            exit 1
        } else {
            ig::templates::add_template_dir $i_tdir
        }
    }

    if {[catch {ig::templates::load_template $c_template}]} {
        ig::log -error "failed to load template \"${c_template}\""
        exit 1
    }

    # construct hierarchy from input file
    if {[string match "*.sng" $c_file] || [string match "*.icsng" $c_file]} {
        ig::sng::parse_file $c_file
    } elseif {[string match "*.tcl" $c_file]} {
        ig::construct::run_script $c_file
    } else {
        ig::log -error "Unknown input file suffix for \"$c_file\""
        exit 1
    }

    # generate modules with template
    foreach i_module [ig::db::get_modules -all] {
        if {![ig::db::get_attribute -object $i_module -attribute "resource"]} {
            ig::log -info "generating module $i_module"
            ig::templates::write_object_all $i_module
        }
        if {![catch {ig::db::get_regfiles -all -of $i_module} regfiles]} {
            foreach i_regfile $regfiles {
                ig::log -info "generating regfiledoc $i_regfile"
                ig::templates::write_object_all $i_regfile
            }
        }
    }
}

main

# vim: set filetype=icgluetcl syntax=tcl:
